# Mostly a copy of Docker Publish action template.
name: Docker-Publish

on:
  push:
    # Publish `main` as Docker `latest` image.
    branches:
      - main

env:
  SERVICE_IMAGE_NAME: container-registry-playground-service
  CLIENT_IMAGE_NAME: container-registry-playground-client

jobs:
  # Run tests.
  # See also https://docs.docker.com/docker-hub/builds/automated-testing/
  # The workflow uses a production compose file for core components, and a separate
  # compose file for an integraion test runner.
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Build core components
        run: |
            docker-compose --file docker-compose.prod.yml build

      - name: Run unit tests
        run: |
            docker-compose --file docker-compose.prod.yml run server npm test
            docker-compose --file docker-compose.prod.yml run client npm test

      # Build the runner *after* unit testing. If unit tests fail, integration tests most likely
      # will fail as well, so there's no point running them.
      - name: Build integrtion test runner
        run: |
            docker-compose --file docker-compose.prod.yml --file docker-compose.test.yml build

      - name: Run integration tests
        run: |
            docker-compose --file docker-compose.prod.yml --file docker-compose.test.yml up --exit-code-from tests

  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  #
  # Both client/ and service/ images end up in the registry.
  # There's a separate action for both.
  # TODO: reuse code, somehow
  push-service:
    # Ensure test job passes before pushing image.
    needs: test

    runs-on: ubuntu-latest
    # Do not push on forks.
    if: github.event_name == 'push' && github.repository == 'rwakulszowa/container-registry-playground'

    steps:
      - uses: actions/checkout@v2

      - name: Build image
        run: docker build ./server --file server/Dockerfile --tag $SERVICE_IMAGE_NAME

      - name: Log into GitHub Container Registry
        run: echo "${{ secrets.CR_PAT }}" | docker login https://ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Push image to GitHub Container Registry
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$SERVICE_IMAGE_NAME

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "main" ] && VERSION=latest

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          docker tag $SERVICE_IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION

  # Pretty much the same thing as push-service.
  push-client:
    needs: test

    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.repository == 'rwakulszowa/container-registry-playground'

    steps:
      - uses: actions/checkout@v2

      - name: Build image
        run: docker build ./client --file client/Dockerfile --tag $CLIENT_IMAGE_NAME

      - name: Log into GitHub Container Registry
        run: echo "${{ secrets.CR_PAT }}" | docker login https://ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Push image to GitHub Container Registry
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$CLIENT_IMAGE_NAME

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "main" ] && VERSION=latest

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          docker tag $CLIENT_IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
